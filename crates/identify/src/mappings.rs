/// This file is automatically generated; please do not modify by hand.
/// Based on code from `identify` (https://github.com/pre-commit/identify)
/// `identify` is licensed:

///   Copyright (c) 2017 Chris Kuehl, Anthony Sottile
///   
///   Permission is hereby granted, free of charge, to any person obtaining a copy
///   of this software and associated documentation files (the "Software"), to deal
///   in the Software without restriction, including without limitation the rights
///   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
///   copies of the Software, and to permit persons to whom the Software is
///   furnished to do so, subject to the following conditions:
///   
///   The above copyright notice and this permission notice shall be included in
///   all copies or substantial portions of the Software.
///   
///   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
///   THE SOFTWARE.
///

use phf::phf_map;

static EXTENSION_MAP: phf::Map<&'static str, &'static (usize, [&str; 4])> = phf_map! {
    "adoc" => &(2, ["asciidoc", "text", "", ""]),
    "ai" => &(2, ["adobe-illustrator", "binary", "", ""]),
    "aj" => &(2, ["aspectj", "text", "", ""]),
    "apinotes" => &(2, ["apinotes", "text", "", ""]),
    "asar" => &(2, ["asar", "binary", "", ""]),
    "asciidoc" => &(2, ["asciidoc", "text", "", ""]),
    "avif" => &(3, ["avif", "binary", "image", ""]),
    "avsc" => &(2, ["avro-schema", "text", "", ""]),
    "bash" => &(3, ["bash", "shell", "text", ""]),
    "bat" => &(2, ["batch", "text", "", ""]),
    "bats" => &(4, ["bash", "bats", "shell", "text"]),
    "bazel" => &(2, ["bazel", "text", "", ""]),
    "beancount" => &(2, ["beancount", "text", "", ""]),
    "bib" => &(2, ["bib", "text", "", ""]),
    "bmp" => &(3, ["binary", "bitmap", "image", ""]),
    "bz2" => &(2, ["binary", "bzip2", "", ""]),
    "bzl" => &(2, ["bazel", "text", "", ""]),
    "c" => &(2, ["c", "text", "", ""]),
    "c++" => &(2, ["c++", "text", "", ""]),
    "c++m" => &(2, ["c++", "text", "", ""]),
    "cc" => &(2, ["c++", "text", "", ""]),
    "ccm" => &(2, ["c++", "text", "", ""]),
    "cfg" => &(1, ["text", "", "", ""]),
    "chs" => &(2, ["c2hs", "text", "", ""]),
    "cjs" => &(2, ["javascript", "text", "", ""]),
    "clj" => &(2, ["clojure", "text", "", ""]),
    "cljc" => &(2, ["clojure", "text", "", ""]),
    "cljs" => &(3, ["clojure", "clojurescript", "text", ""]),
    "cmake" => &(2, ["cmake", "text", "", ""]),
    "cnf" => &(1, ["text", "", "", ""]),
    "coffee" => &(2, ["coffee", "text", "", ""]),
    "conf" => &(1, ["text", "", "", ""]),
    "cpp" => &(2, ["c++", "text", "", ""]),
    "cppm" => &(2, ["c++", "text", "", ""]),
    "cr" => &(2, ["crystal", "text", "", ""]),
    "crt" => &(2, ["pem", "text", "", ""]),
    "cs" => &(2, ["c#", "text", "", ""]),
    "csh" => &(3, ["csh", "shell", "text", ""]),
    "cson" => &(2, ["cson", "text", "", ""]),
    "csproj" => &(3, ["csproj", "text", "xml", ""]),
    "css" => &(2, ["css", "text", "", ""]),
    "csv" => &(2, ["csv", "text", "", ""]),
    "cu" => &(2, ["cuda", "text", "", ""]),
    "cue" => &(2, ["cue", "text", "", ""]),
    "cuh" => &(2, ["cuda", "text", "", ""]),
    "cxx" => &(2, ["c++", "text", "", ""]),
    "cxxm" => &(2, ["c++", "text", "", ""]),
    "cylc" => &(2, ["cylc", "text", "", ""]),
    "dart" => &(2, ["dart", "text", "", ""]),
    "dbc" => &(2, ["dbc", "text", "", ""]),
    "def" => &(2, ["def", "text", "", ""]),
    "dll" => &(1, ["binary", "", "", ""]),
    "dtd" => &(2, ["dtd", "text", "", ""]),
    "ear" => &(3, ["binary", "jar", "zip", ""]),
    "end" => &(3, ["clojure", "end", "text", ""]),
    "ejs" => &(2, ["ejs", "text", "", ""]),
    "env" => &(2, ["dotenv", "text", "", ""]),
    "eot" => &(2, ["binary", "eot", "", ""]),
    "eps" => &(2, ["binary", "eps", "", ""]),
    "erb" => &(2, ["erb", "text", "", ""]),
    "erl" => &(2, ["erlang", "text", "", ""]),
    "ex" => &(2, ["elixir", "text", "", ""]),
    "exe" => &(1, ["binary", "", "", ""]),
    "exs" => &(2, ["elixir", "text", "", ""]),
    "eyaml" => &(2, ["text", "yaml", "", ""]),
    "f03" => &(2, ["fortran", "text", "", ""]),
    "f08" => &(2, ["fortran", "text", "", ""]),
    "f90" => &(2, ["fortran", "text", "", ""]),
    "f95" => &(2, ["fortran", "text", "", ""]),
    "feature" => &(2, ["gherkin", "text", "", ""]),
    "fish" => &(2, ["fish", "text", "", ""]),
    "fits" => &(2, ["binary", "fits", "", ""]),
    "gd" => &(2, ["gdscript", "text", "", ""]),
    "gemspec" => &(2, ["ruby", "text", "", ""]),
    "geojson" => &(3, ["geojson", "json", "text", ""]),
    "ggb" => &(3, ["binary", "ggb", "zip", ""]),
    "gif" => &(3, ["binary", "gif", "image", ""]),
    "go" => &(2, ["go", "text", "", ""]),
    "gotmpl" => &(2, ["gotmpl", "text", "", ""]),
    "gpx" => &(3, ["gpx", "text", "xml", ""]),
    "gradle" => &(2, ["groovy", "text", "", ""]),
    "graphql" => &(2, ["graphql", "text", "", ""]),
    "groovy" => &(2, ["groovy", "text", "", ""]),
    "gyb" => &(2, ["gyb", "text", "", ""]),
    "gyp" => &(3, ["gyp", "python", "text", ""]),
    "gypi" => &(3, ["gyp", "python", "text", ""]),
    "gz" => &(2, ["binary", "gzip", "", ""]),
    "h" => &(4, ["c", "c++", "header", "text"]),
    "hbs" => &(2, ["handlebars", "text", "", ""]),
    "hcl" => &(2, ["hcl", "text", "", ""]),
    "hh" => &(3, ["c++", "header", "text", ""]),
    "hpp" => &(3, ["c++", "header", "text", ""]),
    "hrl" => &(2, ["erlang", "text", "", ""]),
    "hs" => &(2, ["haskell", "text", "", ""]),
    "htm" => &(2, ["html", "text", "", ""]),
    "html" => &(2, ["html", "text", "", ""]),
    "hxx" => &(3, ["c++", "header", "text", ""]),
    "icns" => &(2, ["binary", "icns", "", ""]),
    "ico" => &(2, ["binary", "icon", "", ""]),
    "ics" => &(2, ["icalendar", "text", "", ""]),
    "idl" => &(2, ["idl", "text", "", ""]),
    "idr" => &(2, ["idris", "text", "", ""]),
    "inc" => &(2, ["inc", "text", "", ""]),
    "ini" => &(2, ["ini", "text", "", ""]),
    "inl" => &(3, ["c++", "inl", "text", ""]),
    "ino" => &(3, ["c++", "ino", "text", ""]),
    "inx" => &(3, ["inx", "text", "xml", ""]),
    "ipynb" => &(3, ["json", "jupyter", "text", ""]),
    "ixx" => &(2, ["c++", "text", "", ""]),
    "j2" => &(2, ["jinja", "text", "", ""]),
    "jade" => &(2, ["jade", "text", "", ""]),
    "jar" => &(3, ["binary", "jar", "zip", ""]),
    "java" => &(2, ["java", "text", "", ""]),
    "jenkins" => &(3, ["groovy", "jenkins", "text", ""]),
    "jenkinsfile" => &(3, ["groovy", "jenkins", "text", ""]),
    "jinja" => &(2, ["jinja", "text", "", ""]),
    "jinja2" => &(2, ["jinja", "text", "", ""]),
    "jl" => &(2, ["julia", "text", "", ""]),
    "jpeg" => &(3, ["binary", "image", "jpeg", ""]),
    "jpg" => &(3, ["binary", "image", "jpeg", ""]),
    "js" => &(2, ["javascript", "text", "", ""]),
    "json" => &(2, ["json", "text", "", ""]),
    "json5" => &(2, ["json5", "text", "", ""]),
    "jsonld" => &(3, ["json", "jsonld", "text", ""]),
    "jsonnet" => &(2, ["jsonnet", "text", "", ""]),
    "jsx" => &(2, ["jsx", "text", "", ""]),
    "key" => &(2, ["pem", "text", "", ""]),
    "kml" => &(3, ["kml", "text", "xml", ""]),
    "kt" => &(2, ["kotlin", "text", "", ""]),
    "kts" => &(2, ["kotlin", "text", "", ""]),
    "lean" => &(2, ["lean", "text", "", ""]),
    "lektorproject" => &(3, ["ini", "lektorproject", "text", ""]),
    "less" => &(2, ["less", "text", "", ""]),
    "lfm" => &(3, ["lazarus", "lazarus-form", "text", ""]),
    "lhs" => &(2, ["literate-haskell", "text", "", ""]),
    "libsonnet" => &(2, ["jsonnet", "text", "", ""]),
    "lidr" => &(2, ["idris", "text", "", ""]),
    "liquid" => &(2, ["liquid", "text", "", ""]),
    "lpi" => &(3, ["lazarus", "text", "xml", ""]),
    "lpr" => &(3, ["lazarus", "pascal", "text", ""]),
    "lr" => &(2, ["lektor", "text", "", ""]),
    "lua" => &(2, ["lua", "text", "", ""]),
    "m" => &(2, ["objective-c", "text", "", ""]),
    "m4" => &(2, ["m4", "text", "", ""]),
    "make" => &(2, ["makefile", "text", "", ""]),
    "manifest" => &(2, ["manifest", "text", "", ""]),
    "map" => &(2, ["map", "text", "", ""]),
    "markdown" => &(2, ["markdown", "text", "", ""]),
    "md" => &(2, ["markdown", "text", "", ""]),
    "mdx" => &(2, ["mdx", "text", "", ""]),
    "meson" => &(2, ["meson", "text", "", ""]),
    "metal" => &(2, ["metal", "text", "", ""]),
    "mib" => &(2, ["mib", "text", "", ""]),
    "mjs" => &(2, ["javascript", "text", "", ""]),
    "mk" => &(2, ["makefile", "text", "", ""]),
    "ml" => &(2, ["ocaml", "text", "", ""]),
    "mli" => &(2, ["ocaml", "text", "", ""]),
    "mm" => &(3, ["c++", "objective-c++", "text", ""]),
    "modulemap" => &(2, ["modulemap", "text", "", ""]),
    "mscx" => &(3, ["musescore", "text", "xml", ""]),
    "mscz" => &(3, ["binary", "musescore", "zip", ""]),
    "mustache" => &(2, ["mustache", "text", "", ""]),
    "myst" => &(2, ["myst", "text", "", ""]),
    "ngdoc" => &(2, ["ngdoc", "text", "", ""]),
    "nim" => &(2, ["nim", "text", "", ""]),
    "nimble" => &(2, ["nimble", "text", "", ""]),
    "nims" => &(2, ["nim", "text", "", ""]),
    "nix" => &(2, ["nix", "text", "", ""]),
    "njk" => &(2, ["nunjucks", "text", "", ""]),
    "otf" => &(2, ["binary", "otf", "", ""]),
    "p12" => &(2, ["binary", "p12", "", ""]),
    "pas" => &(2, ["pascal", "text", "", ""]),
    "patch" => &(2, ["diff", "text", "", ""]),
    "pdf" => &(2, ["binary", "pdf", "", ""]),
    "pem" => &(2, ["pem", "text", "", ""]),
    "php" => &(2, ["php", "text", "", ""]),
    "php4" => &(2, ["php", "text", "", ""]),
    "php5" => &(2, ["php", "text", "", ""]),
    "phtml" => &(2, ["php", "text", "", ""]),
    "pl" => &(2, ["perl", "text", "", ""]),
    "plantuml" => &(2, ["plantuml", "text", "", ""]),
    "pm" => &(2, ["perl", "text", "", ""]),
    "png" => &(3, ["binary", "image", "png", ""]),
    "po" => &(2, ["pofile", "text", "", ""]),
    "pom" => &(3, ["pom", "text", "xml", ""]),
    "pp" => &(2, ["puppet", "text", "", ""]),
    "prisma" => &(2, ["prisma", "text", "", ""]),
    "properties" => &(2, ["java-properties", "text", "", ""]),
    "proto" => &(2, ["proto", "text", "", ""]),
    "ps1" => &(2, ["powershell", "text", "", ""]),
    "pug" => &(2, ["pug", "text", "", ""]),
    "puml" => &(2, ["plantuml", "text", "", ""]),
    "purs" => &(2, ["purescript", "text", "", ""]),
    "pxd" => &(2, ["cython", "text", "", ""]),
    "pxi" => &(2, ["cython", "text", "", ""]),
    "py" => &(2, ["python", "text", "", ""]),
    "pyi" => &(2, ["pyi", "text", "", ""]),
    "pyproj" => &(3, ["pyproj", "text", "xml", ""]),
    "pyt" => &(2, ["python", "text", "", ""]),
    "pyx" => &(2, ["cython", "text", "", ""]),
    "pyz" => &(2, ["binary", "pyz", "", ""]),
    "pyzw" => &(2, ["binary", "pyz", "", ""]),
    "qml" => &(2, ["qml", "text", "", ""]),
    "r" => &(2, ["r", "text", "", ""]),
    "rake" => &(2, ["ruby", "text", "", ""]),
    "rb" => &(2, ["ruby", "text", "", ""]),
    "resx" => &(3, ["resx", "text", "xml", ""]),
    "rng" => &(3, ["relax-ng", "text", "xml", ""]),
    "rs" => &(2, ["rust", "text", "", ""]),
    "rst" => &(2, ["rst", "text", "", ""]),
    "s" => &(2, ["asm", "text", "", ""]),
    "sass" => &(2, ["sass", "text", "", ""]),
    "sbt" => &(3, ["sbt", "scala", "text", ""]),
    "sc" => &(2, ["scala", "text", "", ""]),
    "scala" => &(2, ["scala", "text", "", ""]),
    "scm" => &(2, ["scheme", "text", "", ""]),
    "scss" => &(2, ["scss", "text", "", ""]),
    "sh" => &(2, ["shell", "text", "", ""]),
    "sln" => &(2, ["sln", "text", "", ""]),
    "sls" => &(2, ["salt", "text", "", ""]),
    "so" => &(1, ["binary", "", "", ""]),
    "sol" => &(2, ["solidity", "text", "", ""]),
    "spec" => &(2, ["spec", "text", "", ""]),
    "sql" => &(2, ["sql", "text", "", ""]),
    "ss" => &(2, ["scheme", "text", "", ""]),
    "sty" => &(2, ["tex", "text", "", ""]),
    "styl" => &(2, ["stylus", "text", "", ""]),
    "sv" => &(2, ["system-verilog", "text", "", ""]),
    "svelte" => &(2, ["svelte", "text", "", ""]),
    "svg" => &(4, ["image", "svg", "text", "xml"]),
    "svh" => &(2, ["system-verilog", "text", "", ""]),
    "swf" => &(2, ["binary", "swf", "", ""]),
    "swift" => &(2, ["swift", "text", "", ""]),
    "swiftdeps" => &(2, ["swiftdeps", "text", "", ""]),
    "tac" => &(3, ["python", "text", "twisted", ""]),
    "tar" => &(2, ["binary", "tar", "", ""]),
    "tex" => &(2, ["tex", "text", "", ""]),
    "textproto" => &(2, ["text", "textproto", "", ""]),
    "tf" => &(2, ["terraform", "text", "", ""]),
    "tfvars" => &(2, ["terraform", "text", "", ""]),
    "tgz" => &(2, ["binary", "gzip", "", ""]),
    "thrift" => &(2, ["text", "thrift", "", ""]),
    "tiff" => &(3, ["binary", "image", "tiff", ""]),
    "toml" => &(2, ["text", "toml", "", ""]),
    "ts" => &(2, ["text", "ts", "", ""]),
    "tsv" => &(2, ["text", "tsv", "", ""]),
    "tsx" => &(2, ["text", "tsx", "", ""]),
    "ttf" => &(2, ["binary", "ttf", "", ""]),
    "twig" => &(2, ["text", "twig", "", ""]),
    "txsprofile" => &(3, ["ini", "text", "txsprofile", ""]),
    "txt" => &(2, ["plain-text", "text", "", ""]),
    "txtpb" => &(2, ["text", "textproto", "", ""]),
    "urdf" => &(3, ["text", "urdf", "xml", ""]),
    "v" => &(2, ["text", "verilog", "", ""]),
    "vb" => &(2, ["text", "vb", "", ""]),
    "vbproj" => &(3, ["text", "vbproj", "xml", ""]),
    "vcxproj" => &(3, ["text", "vcxproj", "xml", ""]),
    "vdx" => &(2, ["text", "vdx", "", ""]),
    "vh" => &(2, ["text", "verilog", "", ""]),
    "vhd" => &(2, ["text", "vhdl", "", ""]),
    "vim" => &(2, ["text", "vim", "", ""]),
    "vtl" => &(2, ["text", "vtl", "", ""]),
    "vue" => &(2, ["text", "vue", "", ""]),
    "war" => &(3, ["binary", "jar", "zip", ""]),
    "wav" => &(3, ["audio", "binary", "wav", ""]),
    "webp" => &(3, ["binary", "image", "webp", ""]),
    "whl" => &(3, ["binary", "wheel", "zip", ""]),
    "wkt" => &(2, ["text", "wkt", "", ""]),
    "woff" => &(2, ["binary", "woff", "", ""]),
    "woff2" => &(2, ["binary", "woff2", "", ""]),
    "wsgi" => &(3, ["python", "text", "wsgi", ""]),
    "xacro" => &(4, ["text", "urdf", "xacro", "xml"]),
    "xctestplan" => &(2, ["json", "text", "", ""]),
    "xhtml" => &(4, ["html", "text", "xhtml", "xml"]),
    "xml" => &(2, ["text", "xml", "", ""]),
    "xq" => &(2, ["text", "xquery", "", ""]),
    "xql" => &(2, ["text", "xquery", "", ""]),
    "xqm" => &(2, ["text", "xquery", "", ""]),
    "xqu" => &(2, ["text", "xquery", "", ""]),
    "xquery" => &(2, ["text", "xquery", "", ""]),
    "xqy" => &(2, ["text", "xquery", "", ""]),
    "xsd" => &(3, ["text", "xml", "xsd", ""]),
    "xsl" => &(3, ["text", "xml", "xsl", ""]),
    "yaml" => &(2, ["text", "yaml", "", ""]),
    "yamlld" => &(3, ["text", "yaml", "yamlld", ""]),
    "yang" => &(2, ["text", "yang", "", ""]),
    "yin" => &(3, ["text", "xml", "yin", ""]),
    "yml" => &(2, ["text", "yaml", "", ""]),
    "zcml" => &(3, ["text", "xml", "zcml", ""]),
    "zig" => &(2, ["text", "zig", "", ""]),
    "zip" => &(2, ["binary", "zip", "", ""]),
    "zpt" => &(2, ["text", "zpt", "", ""]),
    "zsh" => &(3, ["shell", "text", "zsh", ""]),
};
pub fn map_extension(name: &str) -> Option<&(usize, [&str; 4])> {
    EXTENSION_MAP.get(name).cloned()
}

static NAME_MAP: phf::Map<&'static str, &'static (usize, [&str; 4])> = phf_map! {
    ".ansible-lint" => &(2, ["text", "yaml", "", ""]),
    ".babelrc" => &(3, ["babelrc", "json", "text", ""]),
    ".bash_aliases" => &(3, ["bash", "shell", "text", ""]),
    ".bash_profile" => &(3, ["bash", "shell", "text", ""]),
    ".bashrc" => &(3, ["bash", "shell", "text", ""]),
    ".bazelrc" => &(2, ["bazelrc", "text", "", ""]),
    ".bowerrc" => &(3, ["bowerrc", "json", "text", ""]),
    ".browserslistrc" => &(2, ["browserslistrc", "text", "", ""]),
    ".clang-format" => &(2, ["text", "yaml", "", ""]),
    ".clang-tidy" => &(2, ["text", "yaml", "", ""]),
    ".codespellrc" => &(3, ["codespellrc", "ini", "text", ""]),
    ".coveragerc" => &(3, ["coveragerc", "ini", "text", ""]),
    ".cshrc" => &(3, ["csh", "shell", "text", ""]),
    ".csslintrc" => &(3, ["csslintrc", "json", "text", ""]),
    ".dockerignore" => &(2, ["dockerignore", "text", "", ""]),
    ".editorconfig" => &(2, ["editorconfig", "text", "", ""]),
    ".flake8" => &(3, ["flake8", "ini", "text", ""]),
    ".gitattributes" => &(2, ["gitattributes", "text", "", ""]),
    ".gitconfig" => &(3, ["gitconfig", "ini", "text", ""]),
    ".gitignore" => &(2, ["gitignore", "text", "", ""]),
    ".gitlint" => &(3, ["gitlint", "ini", "text", ""]),
    ".gitmodules" => &(2, ["gitmodules", "text", "", ""]),
    ".hgrc" => &(3, ["hgrc", "ini", "text", ""]),
    ".isort.cfg" => &(3, ["ini", "isort", "text", ""]),
    ".jshintrc" => &(3, ["jshintrc", "json", "text", ""]),
    ".mailmap" => &(2, ["mailmap", "text", "", ""]),
    ".mention-bot" => &(3, ["json", "mention-bot", "text", ""]),
    ".npmignore" => &(2, ["npmignore", "text", "", ""]),
    ".pdbrc" => &(3, ["pdbrc", "python", "text", ""]),
    ".prettierignore" => &(3, ["gitignore", "prettierignore", "text", ""]),
    ".pypirc" => &(3, ["ini", "pypirc", "text", ""]),
    ".rstcheck.cfg" => &(2, ["ini", "text", "", ""]),
    ".salt-lint" => &(3, ["salt-lint", "text", "yaml", ""]),
    ".yamllint" => &(3, ["text", "yaml", "yamllint", ""]),
    ".zlogin" => &(3, ["shell", "text", "zsh", ""]),
    ".zlogout" => &(3, ["shell", "text", "zsh", ""]),
    ".zprofile" => &(3, ["shell", "text", "zsh", ""]),
    ".zshenv" => &(3, ["shell", "text", "zsh", ""]),
    ".zshrc" => &(3, ["shell", "text", "zsh", ""]),
    "AUTHORS" => &(2, ["plain-text", "text", "", ""]),
    "BUILD" => &(2, ["bazel", "text", "", ""]),
    "CHANGELOG" => &(2, ["plain-text", "text", "", ""]),
    "CMakeLists.txt" => &(2, ["cmake", "text", "", ""]),
    "CONTRIBUTING" => &(2, ["plain-text", "text", "", ""]),
    "COPYING" => &(2, ["plain-text", "text", "", ""]),
    "Containerfile" => &(2, ["dockerfile", "text", "", ""]),
    "Dockerfile" => &(2, ["dockerfile", "text", "", ""]),
    "GNUmakefile" => &(2, ["makefile", "text", "", ""]),
    "Gemfile" => &(2, ["ruby", "text", "", ""]),
    "Gemfile.lock" => &(1, ["text", "", "", ""]),
    "Jenkinsfile" => &(3, ["groovy", "jenkins", "text", ""]),
    "LICENSE" => &(2, ["plain-text", "text", "", ""]),
    "MAINTAINERS" => &(2, ["plain-text", "text", "", ""]),
    "Makefile" => &(2, ["makefile", "text", "", ""]),
    "NEWS" => &(2, ["plain-text", "text", "", ""]),
    "NOTICE" => &(2, ["plain-text", "text", "", ""]),
    "PATENTS" => &(2, ["plain-text", "text", "", ""]),
    "PKGBUILD" => &(4, ["alpm", "bash", "pkgbuild", "text"]),
    "Pipfile" => &(2, ["text", "toml", "", ""]),
    "Pipfile.lock" => &(2, ["json", "text", "", ""]),
    "README" => &(2, ["plain-text", "text", "", ""]),
    "Rakefile" => &(2, ["ruby", "text", "", ""]),
    "Vagrantfile" => &(2, ["ruby", "text", "", ""]),
    "WORKSPACE" => &(2, ["bazel", "text", "", ""]),
    "config.ru" => &(2, ["ruby", "text", "", ""]),
    "copy.bara.sky" => &(2, ["bazel", "text", "", ""]),
    "go.mod" => &(2, ["go-mod", "text", "", ""]),
    "go.sum" => &(2, ["go-sum", "text", "", ""]),
    "makefile" => &(2, ["makefile", "text", "", ""]),
    "meson.build" => &(2, ["meson", "text", "", ""]),
    "meson_options.txt" => &(2, ["meson", "text", "", ""]),
    "poetry.lock" => &(2, ["text", "toml", "", ""]),
    "pom.xml" => &(3, ["pom", "text", "xml", ""]),
    "pylintrc" => &(3, ["ini", "pylintrc", "text", ""]),
    "rebar.config" => &(2, ["erlang", "text", "", ""]),
    "setup.cfg" => &(2, ["ini", "text", "", ""]),
    "sys.config" => &(2, ["erlang", "text", "", ""]),
    "sys.config.src" => &(2, ["erlang", "text", "", ""]),
    "wscript" => &(2, ["python", "text", "", ""]),
};
pub fn map_name(name: &str) -> Option<&(usize, [&str; 4])> {
    NAME_MAP.get(name).cloned()
}
