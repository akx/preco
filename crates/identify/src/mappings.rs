/// This file is automatically generated; please do not modify by hand.
/// Based on code from `identify` (https://github.com/pre-commit/identify)
/// `identify` is licensed:
///
///
///   Copyright (c) 2017 Chris Kuehl, Anthony Sottile
///   
///   Permission is hereby granted, free of charge, to any person obtaining a copy
///   of this software and associated documentation files (the "Software"), to deal
///   in the Software without restriction, including without limitation the rights
///   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
///   copies of the Software, and to permit persons to whom the Software is
///   furnished to do so, subject to the following conditions:
///   
///   The above copyright notice and this permission notice shall be included in
///   all copies or substantial portions of the Software.
///   
///   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
///   THE SOFTWARE.
///
use phf::phf_map;
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum Type {
    AdobeIllustrator,
    Alpm,
    Apinotes,
    Asar,
    Asciidoc,
    Asm,
    Aspectj,
    Audio,
    Avif,
    AvroSchema,
    BabelRc,
    Bash,
    Batch,
    Bats,
    Bazel,
    BazelRc,
    Beancount,
    Bib,
    Binary,
    Bitmap,
    BowerRc,
    BrowserslistRc,
    Bzip2,
    C,
    C2hs,
    CPlusPlus,
    CSharp,
    Clojure,
    Clojurescript,
    Cmake,
    CodespellRc,
    Coffee,
    CoverageRc,
    Crystal,
    Csh,
    Cson,
    Csproj,
    Css,
    CsslintRc,
    Csv,
    Cuda,
    Cue,
    Cylc,
    Cython,
    Dart,
    Dbc,
    Def,
    Diff,
    Directory,
    Dockerfile,
    Dockerignore,
    Dotenv,
    Dtd,
    Editorconfig,
    Edn,
    Ejs,
    Elixir,
    Eot,
    Eps,
    Erb,
    Erlang,
    Executable,
    File,
    Fish,
    Fits,
    Flake8,
    Fortran,
    Gdscript,
    Geojson,
    Ggb,
    Gherkin,
    Gif,
    Gitattributes,
    Gitconfig,
    Gitignore,
    Gitlint,
    Gitmodules,
    Go,
    GoMod,
    GoSum,
    Gotmpl,
    Gpx,
    Graphql,
    Groovy,
    Gyb,
    Gyp,
    Gzip,
    Handlebars,
    Haskell,
    Hcl,
    Header,
    HgRc,
    Html,
    Icalendar,
    Icns,
    Icon,
    Idl,
    Idris,
    Image,
    Inc,
    Ini,
    Inl,
    Ino,
    Inx,
    Isort,
    Jade,
    Jar,
    Java,
    JavaProperties,
    Javascript,
    Jenkins,
    Jinja,
    Jpeg,
    JshintRc,
    Json,
    Json5,
    Jsonld,
    Jsonnet,
    Jsx,
    Julia,
    Jupyter,
    Kml,
    Kotlin,
    Lazarus,
    LazarusForm,
    Lean,
    Lektor,
    Lektorproject,
    Less,
    Liquid,
    LiterateHaskell,
    Lua,
    M4,
    Mailmap,
    Makefile,
    Manifest,
    Map,
    Markdown,
    Mdx,
    MentionBot,
    Meson,
    Metal,
    Mib,
    Modulemap,
    Musescore,
    Mustache,
    Myst,
    Ngdoc,
    Nim,
    Nimble,
    Nix,
    NonExecutable,
    Npmignore,
    Nunjucks,
    ObjectiveC,
    ObjectiveCPlusPlus,
    Ocaml,
    Otf,
    P12,
    Pascal,
    PdbRc,
    Pdf,
    Pem,
    Perl,
    Php,
    Pkgbuild,
    PlainText,
    Plantuml,
    Png,
    Pofile,
    Pom,
    Powershell,
    Prettierignore,
    Prisma,
    Proto,
    Pug,
    Puppet,
    Purescript,
    Pyi,
    PylintRc,
    PypiRc,
    Pyproj,
    Python,
    Pyz,
    Qml,
    R,
    RelaxNg,
    Resx,
    Rst,
    Ruby,
    Rust,
    Salt,
    SaltLint,
    Sass,
    Sbt,
    Scala,
    Scheme,
    Scss,
    Shell,
    Sln,
    Socket,
    Solidity,
    Spec,
    Sql,
    Stylus,
    Svelte,
    Svg,
    Swf,
    Swift,
    Swiftdeps,
    Symlink,
    SystemVerilog,
    Tar,
    Terraform,
    Tex,
    Text,
    Textproto,
    Thrift,
    Tiff,
    Toml,
    Ts,
    Tsv,
    Tsx,
    Ttf,
    Twig,
    Twisted,
    Txsprofile,
    Urdf,
    Vb,
    Vbproj,
    Vcxproj,
    Vdx,
    Verilog,
    Vhdl,
    Vim,
    Vtl,
    Vue,
    Wav,
    Webp,
    Wheel,
    Wkt,
    Woff,
    Woff2,
    Wsgi,
    Xacro,
    Xhtml,
    Xml,
    Xquery,
    Xsd,
    Xsl,
    Yaml,
    Yamlld,
    Yamllint,
    Yang,
    Yin,
    Zcml,
    Zig,
    Zip,
    Zpt,
    Zsh,
}
impl std::str::FromStr for Type {
    type Err = ();
    fn from_str(s: &str) -> Result<Type, ()> {
        match s {
            "adobe-illustrator" => Ok(Type::AdobeIllustrator),
            "alpm" => Ok(Type::Alpm),
            "apinotes" => Ok(Type::Apinotes),
            "asar" => Ok(Type::Asar),
            "asciidoc" => Ok(Type::Asciidoc),
            "asm" => Ok(Type::Asm),
            "aspectj" => Ok(Type::Aspectj),
            "audio" => Ok(Type::Audio),
            "avif" => Ok(Type::Avif),
            "avro-schema" => Ok(Type::AvroSchema),
            "babelrc" => Ok(Type::BabelRc),
            "bash" => Ok(Type::Bash),
            "batch" => Ok(Type::Batch),
            "bats" => Ok(Type::Bats),
            "bazel" => Ok(Type::Bazel),
            "bazelrc" => Ok(Type::BazelRc),
            "beancount" => Ok(Type::Beancount),
            "bib" => Ok(Type::Bib),
            "binary" => Ok(Type::Binary),
            "bitmap" => Ok(Type::Bitmap),
            "bowerrc" => Ok(Type::BowerRc),
            "browserslistrc" => Ok(Type::BrowserslistRc),
            "bzip2" => Ok(Type::Bzip2),
            "c" => Ok(Type::C),
            "c#" => Ok(Type::CSharp),
            "c++" => Ok(Type::CPlusPlus),
            "c2hs" => Ok(Type::C2hs),
            "clojure" => Ok(Type::Clojure),
            "clojurescript" => Ok(Type::Clojurescript),
            "cmake" => Ok(Type::Cmake),
            "codespellrc" => Ok(Type::CodespellRc),
            "coffee" => Ok(Type::Coffee),
            "coveragerc" => Ok(Type::CoverageRc),
            "crystal" => Ok(Type::Crystal),
            "csh" => Ok(Type::Csh),
            "cson" => Ok(Type::Cson),
            "csproj" => Ok(Type::Csproj),
            "css" => Ok(Type::Css),
            "csslintrc" => Ok(Type::CsslintRc),
            "csv" => Ok(Type::Csv),
            "cuda" => Ok(Type::Cuda),
            "cue" => Ok(Type::Cue),
            "cylc" => Ok(Type::Cylc),
            "cython" => Ok(Type::Cython),
            "dart" => Ok(Type::Dart),
            "dbc" => Ok(Type::Dbc),
            "def" => Ok(Type::Def),
            "diff" => Ok(Type::Diff),
            "directory" => Ok(Type::Directory),
            "dockerfile" => Ok(Type::Dockerfile),
            "dockerignore" => Ok(Type::Dockerignore),
            "dotenv" => Ok(Type::Dotenv),
            "dtd" => Ok(Type::Dtd),
            "editorconfig" => Ok(Type::Editorconfig),
            "edn" => Ok(Type::Edn),
            "ejs" => Ok(Type::Ejs),
            "elixir" => Ok(Type::Elixir),
            "eot" => Ok(Type::Eot),
            "eps" => Ok(Type::Eps),
            "erb" => Ok(Type::Erb),
            "erlang" => Ok(Type::Erlang),
            "executable" => Ok(Type::Executable),
            "file" => Ok(Type::File),
            "fish" => Ok(Type::Fish),
            "fits" => Ok(Type::Fits),
            "flake8" => Ok(Type::Flake8),
            "fortran" => Ok(Type::Fortran),
            "gdscript" => Ok(Type::Gdscript),
            "geojson" => Ok(Type::Geojson),
            "ggb" => Ok(Type::Ggb),
            "gherkin" => Ok(Type::Gherkin),
            "gif" => Ok(Type::Gif),
            "gitattributes" => Ok(Type::Gitattributes),
            "gitconfig" => Ok(Type::Gitconfig),
            "gitignore" => Ok(Type::Gitignore),
            "gitlint" => Ok(Type::Gitlint),
            "gitmodules" => Ok(Type::Gitmodules),
            "go" => Ok(Type::Go),
            "go-mod" => Ok(Type::GoMod),
            "go-sum" => Ok(Type::GoSum),
            "gotmpl" => Ok(Type::Gotmpl),
            "gpx" => Ok(Type::Gpx),
            "graphql" => Ok(Type::Graphql),
            "groovy" => Ok(Type::Groovy),
            "gyb" => Ok(Type::Gyb),
            "gyp" => Ok(Type::Gyp),
            "gzip" => Ok(Type::Gzip),
            "handlebars" => Ok(Type::Handlebars),
            "haskell" => Ok(Type::Haskell),
            "hcl" => Ok(Type::Hcl),
            "header" => Ok(Type::Header),
            "hgrc" => Ok(Type::HgRc),
            "html" => Ok(Type::Html),
            "icalendar" => Ok(Type::Icalendar),
            "icns" => Ok(Type::Icns),
            "icon" => Ok(Type::Icon),
            "idl" => Ok(Type::Idl),
            "idris" => Ok(Type::Idris),
            "image" => Ok(Type::Image),
            "inc" => Ok(Type::Inc),
            "ini" => Ok(Type::Ini),
            "inl" => Ok(Type::Inl),
            "ino" => Ok(Type::Ino),
            "inx" => Ok(Type::Inx),
            "isort" => Ok(Type::Isort),
            "jade" => Ok(Type::Jade),
            "jar" => Ok(Type::Jar),
            "java" => Ok(Type::Java),
            "java-properties" => Ok(Type::JavaProperties),
            "javascript" => Ok(Type::Javascript),
            "jenkins" => Ok(Type::Jenkins),
            "jinja" => Ok(Type::Jinja),
            "jpeg" => Ok(Type::Jpeg),
            "jshintrc" => Ok(Type::JshintRc),
            "json" => Ok(Type::Json),
            "json5" => Ok(Type::Json5),
            "jsonld" => Ok(Type::Jsonld),
            "jsonnet" => Ok(Type::Jsonnet),
            "jsx" => Ok(Type::Jsx),
            "julia" => Ok(Type::Julia),
            "jupyter" => Ok(Type::Jupyter),
            "kml" => Ok(Type::Kml),
            "kotlin" => Ok(Type::Kotlin),
            "lazarus" => Ok(Type::Lazarus),
            "lazarus-form" => Ok(Type::LazarusForm),
            "lean" => Ok(Type::Lean),
            "lektor" => Ok(Type::Lektor),
            "lektorproject" => Ok(Type::Lektorproject),
            "less" => Ok(Type::Less),
            "liquid" => Ok(Type::Liquid),
            "literate-haskell" => Ok(Type::LiterateHaskell),
            "lua" => Ok(Type::Lua),
            "m4" => Ok(Type::M4),
            "mailmap" => Ok(Type::Mailmap),
            "makefile" => Ok(Type::Makefile),
            "manifest" => Ok(Type::Manifest),
            "map" => Ok(Type::Map),
            "markdown" => Ok(Type::Markdown),
            "mdx" => Ok(Type::Mdx),
            "mention-bot" => Ok(Type::MentionBot),
            "meson" => Ok(Type::Meson),
            "metal" => Ok(Type::Metal),
            "mib" => Ok(Type::Mib),
            "modulemap" => Ok(Type::Modulemap),
            "musescore" => Ok(Type::Musescore),
            "mustache" => Ok(Type::Mustache),
            "myst" => Ok(Type::Myst),
            "ngdoc" => Ok(Type::Ngdoc),
            "nim" => Ok(Type::Nim),
            "nimble" => Ok(Type::Nimble),
            "nix" => Ok(Type::Nix),
            "non_executable" => Ok(Type::NonExecutable),
            "npmignore" => Ok(Type::Npmignore),
            "nunjucks" => Ok(Type::Nunjucks),
            "objective-c" => Ok(Type::ObjectiveC),
            "objective-c++" => Ok(Type::ObjectiveCPlusPlus),
            "ocaml" => Ok(Type::Ocaml),
            "otf" => Ok(Type::Otf),
            "p12" => Ok(Type::P12),
            "pascal" => Ok(Type::Pascal),
            "pdbrc" => Ok(Type::PdbRc),
            "pdf" => Ok(Type::Pdf),
            "pem" => Ok(Type::Pem),
            "perl" => Ok(Type::Perl),
            "php" => Ok(Type::Php),
            "pkgbuild" => Ok(Type::Pkgbuild),
            "plain-text" => Ok(Type::PlainText),
            "plantuml" => Ok(Type::Plantuml),
            "png" => Ok(Type::Png),
            "pofile" => Ok(Type::Pofile),
            "pom" => Ok(Type::Pom),
            "powershell" => Ok(Type::Powershell),
            "prettierignore" => Ok(Type::Prettierignore),
            "prisma" => Ok(Type::Prisma),
            "proto" => Ok(Type::Proto),
            "pug" => Ok(Type::Pug),
            "puppet" => Ok(Type::Puppet),
            "purescript" => Ok(Type::Purescript),
            "pyi" => Ok(Type::Pyi),
            "pylintrc" => Ok(Type::PylintRc),
            "pypirc" => Ok(Type::PypiRc),
            "pyproj" => Ok(Type::Pyproj),
            "python" => Ok(Type::Python),
            "pyz" => Ok(Type::Pyz),
            "qml" => Ok(Type::Qml),
            "r" => Ok(Type::R),
            "relax-ng" => Ok(Type::RelaxNg),
            "resx" => Ok(Type::Resx),
            "rst" => Ok(Type::Rst),
            "ruby" => Ok(Type::Ruby),
            "rust" => Ok(Type::Rust),
            "salt" => Ok(Type::Salt),
            "salt-lint" => Ok(Type::SaltLint),
            "sass" => Ok(Type::Sass),
            "sbt" => Ok(Type::Sbt),
            "scala" => Ok(Type::Scala),
            "scheme" => Ok(Type::Scheme),
            "scss" => Ok(Type::Scss),
            "shell" => Ok(Type::Shell),
            "sln" => Ok(Type::Sln),
            "socket" => Ok(Type::Socket),
            "solidity" => Ok(Type::Solidity),
            "spec" => Ok(Type::Spec),
            "sql" => Ok(Type::Sql),
            "stylus" => Ok(Type::Stylus),
            "svelte" => Ok(Type::Svelte),
            "svg" => Ok(Type::Svg),
            "swf" => Ok(Type::Swf),
            "swift" => Ok(Type::Swift),
            "swiftdeps" => Ok(Type::Swiftdeps),
            "symlink" => Ok(Type::Symlink),
            "system-verilog" => Ok(Type::SystemVerilog),
            "tar" => Ok(Type::Tar),
            "terraform" => Ok(Type::Terraform),
            "tex" => Ok(Type::Tex),
            "text" => Ok(Type::Text),
            "textproto" => Ok(Type::Textproto),
            "thrift" => Ok(Type::Thrift),
            "tiff" => Ok(Type::Tiff),
            "toml" => Ok(Type::Toml),
            "ts" => Ok(Type::Ts),
            "tsv" => Ok(Type::Tsv),
            "tsx" => Ok(Type::Tsx),
            "ttf" => Ok(Type::Ttf),
            "twig" => Ok(Type::Twig),
            "twisted" => Ok(Type::Twisted),
            "txsprofile" => Ok(Type::Txsprofile),
            "urdf" => Ok(Type::Urdf),
            "vb" => Ok(Type::Vb),
            "vbproj" => Ok(Type::Vbproj),
            "vcxproj" => Ok(Type::Vcxproj),
            "vdx" => Ok(Type::Vdx),
            "verilog" => Ok(Type::Verilog),
            "vhdl" => Ok(Type::Vhdl),
            "vim" => Ok(Type::Vim),
            "vtl" => Ok(Type::Vtl),
            "vue" => Ok(Type::Vue),
            "wav" => Ok(Type::Wav),
            "webp" => Ok(Type::Webp),
            "wheel" => Ok(Type::Wheel),
            "wkt" => Ok(Type::Wkt),
            "woff" => Ok(Type::Woff),
            "woff2" => Ok(Type::Woff2),
            "wsgi" => Ok(Type::Wsgi),
            "xacro" => Ok(Type::Xacro),
            "xhtml" => Ok(Type::Xhtml),
            "xml" => Ok(Type::Xml),
            "xquery" => Ok(Type::Xquery),
            "xsd" => Ok(Type::Xsd),
            "xsl" => Ok(Type::Xsl),
            "yaml" => Ok(Type::Yaml),
            "yamlld" => Ok(Type::Yamlld),
            "yamllint" => Ok(Type::Yamllint),
            "yang" => Ok(Type::Yang),
            "yin" => Ok(Type::Yin),
            "zcml" => Ok(Type::Zcml),
            "zig" => Ok(Type::Zig),
            "zip" => Ok(Type::Zip),
            "zpt" => Ok(Type::Zpt),
            "zsh" => Ok(Type::Zsh),
            _ => Err(()),
        }
    }
}

static EXTENSION_MAP: phf::Map<&'static str, &'static [Option<Type>; 4]> = phf_map! {
    "adoc" => &[Some(Type::Asciidoc), Some(Type::Text), None, None],
    "ai" => &[Some(Type::AdobeIllustrator), Some(Type::Binary), None, None],
    "aj" => &[Some(Type::Aspectj), Some(Type::Text), None, None],
    "apinotes" => &[Some(Type::Apinotes), Some(Type::Text), None, None],
    "asar" => &[Some(Type::Asar), Some(Type::Binary), None, None],
    "asciidoc" => &[Some(Type::Asciidoc), Some(Type::Text), None, None],
    "avif" => &[Some(Type::Avif), Some(Type::Binary), Some(Type::Image), None],
    "avsc" => &[Some(Type::AvroSchema), Some(Type::Text), None, None],
    "bash" => &[Some(Type::Bash), Some(Type::Shell), Some(Type::Text), None],
    "bat" => &[Some(Type::Batch), Some(Type::Text), None, None],
    "bats" => &[Some(Type::Bash), Some(Type::Bats), Some(Type::Shell), Some(Type::Text)],
    "bazel" => &[Some(Type::Bazel), Some(Type::Text), None, None],
    "beancount" => &[Some(Type::Beancount), Some(Type::Text), None, None],
    "bib" => &[Some(Type::Bib), Some(Type::Text), None, None],
    "bmp" => &[Some(Type::Binary), Some(Type::Bitmap), Some(Type::Image), None],
    "bz2" => &[Some(Type::Binary), Some(Type::Bzip2), None, None],
    "bzl" => &[Some(Type::Bazel), Some(Type::Text), None, None],
    "c" => &[Some(Type::C), Some(Type::Text), None, None],
    "c++" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "c++m" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "cc" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "ccm" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "cfg" => &[Some(Type::Text), None, None, None],
    "chs" => &[Some(Type::C2hs), Some(Type::Text), None, None],
    "cjs" => &[Some(Type::Javascript), Some(Type::Text), None, None],
    "clj" => &[Some(Type::Clojure), Some(Type::Text), None, None],
    "cljc" => &[Some(Type::Clojure), Some(Type::Text), None, None],
    "cljs" => &[Some(Type::Clojure), Some(Type::Clojurescript), Some(Type::Text), None],
    "cmake" => &[Some(Type::Cmake), Some(Type::Text), None, None],
    "cnf" => &[Some(Type::Text), None, None, None],
    "coffee" => &[Some(Type::Coffee), Some(Type::Text), None, None],
    "conf" => &[Some(Type::Text), None, None, None],
    "cpp" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "cppm" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "cr" => &[Some(Type::Crystal), Some(Type::Text), None, None],
    "crt" => &[Some(Type::Pem), Some(Type::Text), None, None],
    "cs" => &[Some(Type::CSharp), Some(Type::Text), None, None],
    "csh" => &[Some(Type::Csh), Some(Type::Shell), Some(Type::Text), None],
    "cson" => &[Some(Type::Cson), Some(Type::Text), None, None],
    "csproj" => &[Some(Type::Csproj), Some(Type::Text), Some(Type::Xml), None],
    "css" => &[Some(Type::Css), Some(Type::Text), None, None],
    "csv" => &[Some(Type::Csv), Some(Type::Text), None, None],
    "cu" => &[Some(Type::Cuda), Some(Type::Text), None, None],
    "cue" => &[Some(Type::Cue), Some(Type::Text), None, None],
    "cuh" => &[Some(Type::Cuda), Some(Type::Text), None, None],
    "cxx" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "cxxm" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "cylc" => &[Some(Type::Cylc), Some(Type::Text), None, None],
    "dart" => &[Some(Type::Dart), Some(Type::Text), None, None],
    "dbc" => &[Some(Type::Dbc), Some(Type::Text), None, None],
    "def" => &[Some(Type::Def), Some(Type::Text), None, None],
    "dll" => &[Some(Type::Binary), None, None, None],
    "dtd" => &[Some(Type::Dtd), Some(Type::Text), None, None],
    "ear" => &[Some(Type::Binary), Some(Type::Jar), Some(Type::Zip), None],
    "edn" => &[Some(Type::Clojure), Some(Type::Edn), Some(Type::Text), None],
    "ejs" => &[Some(Type::Ejs), Some(Type::Text), None, None],
    "env" => &[Some(Type::Dotenv), Some(Type::Text), None, None],
    "eot" => &[Some(Type::Binary), Some(Type::Eot), None, None],
    "eps" => &[Some(Type::Binary), Some(Type::Eps), None, None],
    "erb" => &[Some(Type::Erb), Some(Type::Text), None, None],
    "erl" => &[Some(Type::Erlang), Some(Type::Text), None, None],
    "ex" => &[Some(Type::Elixir), Some(Type::Text), None, None],
    "exe" => &[Some(Type::Binary), None, None, None],
    "exs" => &[Some(Type::Elixir), Some(Type::Text), None, None],
    "eyaml" => &[Some(Type::Text), Some(Type::Yaml), None, None],
    "f03" => &[Some(Type::Fortran), Some(Type::Text), None, None],
    "f08" => &[Some(Type::Fortran), Some(Type::Text), None, None],
    "f90" => &[Some(Type::Fortran), Some(Type::Text), None, None],
    "f95" => &[Some(Type::Fortran), Some(Type::Text), None, None],
    "feature" => &[Some(Type::Gherkin), Some(Type::Text), None, None],
    "fish" => &[Some(Type::Fish), Some(Type::Text), None, None],
    "fits" => &[Some(Type::Binary), Some(Type::Fits), None, None],
    "gd" => &[Some(Type::Gdscript), Some(Type::Text), None, None],
    "gemspec" => &[Some(Type::Ruby), Some(Type::Text), None, None],
    "geojson" => &[Some(Type::Geojson), Some(Type::Json), Some(Type::Text), None],
    "ggb" => &[Some(Type::Binary), Some(Type::Ggb), Some(Type::Zip), None],
    "gif" => &[Some(Type::Binary), Some(Type::Gif), Some(Type::Image), None],
    "go" => &[Some(Type::Go), Some(Type::Text), None, None],
    "gotmpl" => &[Some(Type::Gotmpl), Some(Type::Text), None, None],
    "gpx" => &[Some(Type::Gpx), Some(Type::Text), Some(Type::Xml), None],
    "gradle" => &[Some(Type::Groovy), Some(Type::Text), None, None],
    "graphql" => &[Some(Type::Graphql), Some(Type::Text), None, None],
    "groovy" => &[Some(Type::Groovy), Some(Type::Text), None, None],
    "gyb" => &[Some(Type::Gyb), Some(Type::Text), None, None],
    "gyp" => &[Some(Type::Gyp), Some(Type::Python), Some(Type::Text), None],
    "gypi" => &[Some(Type::Gyp), Some(Type::Python), Some(Type::Text), None],
    "gz" => &[Some(Type::Binary), Some(Type::Gzip), None, None],
    "h" => &[Some(Type::C), Some(Type::CPlusPlus), Some(Type::Header), Some(Type::Text)],
    "hbs" => &[Some(Type::Handlebars), Some(Type::Text), None, None],
    "hcl" => &[Some(Type::Hcl), Some(Type::Text), None, None],
    "hh" => &[Some(Type::CPlusPlus), Some(Type::Header), Some(Type::Text), None],
    "hpp" => &[Some(Type::CPlusPlus), Some(Type::Header), Some(Type::Text), None],
    "hrl" => &[Some(Type::Erlang), Some(Type::Text), None, None],
    "hs" => &[Some(Type::Haskell), Some(Type::Text), None, None],
    "htm" => &[Some(Type::Html), Some(Type::Text), None, None],
    "html" => &[Some(Type::Html), Some(Type::Text), None, None],
    "hxx" => &[Some(Type::CPlusPlus), Some(Type::Header), Some(Type::Text), None],
    "icns" => &[Some(Type::Binary), Some(Type::Icns), None, None],
    "ico" => &[Some(Type::Binary), Some(Type::Icon), None, None],
    "ics" => &[Some(Type::Icalendar), Some(Type::Text), None, None],
    "idl" => &[Some(Type::Idl), Some(Type::Text), None, None],
    "idr" => &[Some(Type::Idris), Some(Type::Text), None, None],
    "inc" => &[Some(Type::Inc), Some(Type::Text), None, None],
    "ini" => &[Some(Type::Ini), Some(Type::Text), None, None],
    "inl" => &[Some(Type::CPlusPlus), Some(Type::Inl), Some(Type::Text), None],
    "ino" => &[Some(Type::CPlusPlus), Some(Type::Ino), Some(Type::Text), None],
    "inx" => &[Some(Type::Inx), Some(Type::Text), Some(Type::Xml), None],
    "ipynb" => &[Some(Type::Json), Some(Type::Jupyter), Some(Type::Text), None],
    "ixx" => &[Some(Type::CPlusPlus), Some(Type::Text), None, None],
    "j2" => &[Some(Type::Jinja), Some(Type::Text), None, None],
    "jade" => &[Some(Type::Jade), Some(Type::Text), None, None],
    "jar" => &[Some(Type::Binary), Some(Type::Jar), Some(Type::Zip), None],
    "java" => &[Some(Type::Java), Some(Type::Text), None, None],
    "jenkins" => &[Some(Type::Groovy), Some(Type::Jenkins), Some(Type::Text), None],
    "jenkinsfile" => &[Some(Type::Groovy), Some(Type::Jenkins), Some(Type::Text), None],
    "jinja" => &[Some(Type::Jinja), Some(Type::Text), None, None],
    "jinja2" => &[Some(Type::Jinja), Some(Type::Text), None, None],
    "jl" => &[Some(Type::Julia), Some(Type::Text), None, None],
    "jpeg" => &[Some(Type::Binary), Some(Type::Image), Some(Type::Jpeg), None],
    "jpg" => &[Some(Type::Binary), Some(Type::Image), Some(Type::Jpeg), None],
    "js" => &[Some(Type::Javascript), Some(Type::Text), None, None],
    "json" => &[Some(Type::Json), Some(Type::Text), None, None],
    "json5" => &[Some(Type::Json5), Some(Type::Text), None, None],
    "jsonld" => &[Some(Type::Json), Some(Type::Jsonld), Some(Type::Text), None],
    "jsonnet" => &[Some(Type::Jsonnet), Some(Type::Text), None, None],
    "jsx" => &[Some(Type::Jsx), Some(Type::Text), None, None],
    "key" => &[Some(Type::Pem), Some(Type::Text), None, None],
    "kml" => &[Some(Type::Kml), Some(Type::Text), Some(Type::Xml), None],
    "kt" => &[Some(Type::Kotlin), Some(Type::Text), None, None],
    "kts" => &[Some(Type::Kotlin), Some(Type::Text), None, None],
    "lean" => &[Some(Type::Lean), Some(Type::Text), None, None],
    "lektorproject" => &[Some(Type::Ini), Some(Type::Lektorproject), Some(Type::Text), None],
    "less" => &[Some(Type::Less), Some(Type::Text), None, None],
    "lfm" => &[Some(Type::Lazarus), Some(Type::LazarusForm), Some(Type::Text), None],
    "lhs" => &[Some(Type::LiterateHaskell), Some(Type::Text), None, None],
    "libsonnet" => &[Some(Type::Jsonnet), Some(Type::Text), None, None],
    "lidr" => &[Some(Type::Idris), Some(Type::Text), None, None],
    "liquid" => &[Some(Type::Liquid), Some(Type::Text), None, None],
    "lpi" => &[Some(Type::Lazarus), Some(Type::Text), Some(Type::Xml), None],
    "lpr" => &[Some(Type::Lazarus), Some(Type::Pascal), Some(Type::Text), None],
    "lr" => &[Some(Type::Lektor), Some(Type::Text), None, None],
    "lua" => &[Some(Type::Lua), Some(Type::Text), None, None],
    "m" => &[Some(Type::ObjectiveC), Some(Type::Text), None, None],
    "m4" => &[Some(Type::M4), Some(Type::Text), None, None],
    "make" => &[Some(Type::Makefile), Some(Type::Text), None, None],
    "manifest" => &[Some(Type::Manifest), Some(Type::Text), None, None],
    "map" => &[Some(Type::Map), Some(Type::Text), None, None],
    "markdown" => &[Some(Type::Markdown), Some(Type::Text), None, None],
    "md" => &[Some(Type::Markdown), Some(Type::Text), None, None],
    "mdx" => &[Some(Type::Mdx), Some(Type::Text), None, None],
    "meson" => &[Some(Type::Meson), Some(Type::Text), None, None],
    "metal" => &[Some(Type::Metal), Some(Type::Text), None, None],
    "mib" => &[Some(Type::Mib), Some(Type::Text), None, None],
    "mjs" => &[Some(Type::Javascript), Some(Type::Text), None, None],
    "mk" => &[Some(Type::Makefile), Some(Type::Text), None, None],
    "ml" => &[Some(Type::Ocaml), Some(Type::Text), None, None],
    "mli" => &[Some(Type::Ocaml), Some(Type::Text), None, None],
    "mm" => &[Some(Type::CPlusPlus), Some(Type::ObjectiveCPlusPlus), Some(Type::Text), None],
    "modulemap" => &[Some(Type::Modulemap), Some(Type::Text), None, None],
    "mscx" => &[Some(Type::Musescore), Some(Type::Text), Some(Type::Xml), None],
    "mscz" => &[Some(Type::Binary), Some(Type::Musescore), Some(Type::Zip), None],
    "mustache" => &[Some(Type::Mustache), Some(Type::Text), None, None],
    "myst" => &[Some(Type::Myst), Some(Type::Text), None, None],
    "ngdoc" => &[Some(Type::Ngdoc), Some(Type::Text), None, None],
    "nim" => &[Some(Type::Nim), Some(Type::Text), None, None],
    "nimble" => &[Some(Type::Nimble), Some(Type::Text), None, None],
    "nims" => &[Some(Type::Nim), Some(Type::Text), None, None],
    "nix" => &[Some(Type::Nix), Some(Type::Text), None, None],
    "njk" => &[Some(Type::Nunjucks), Some(Type::Text), None, None],
    "otf" => &[Some(Type::Binary), Some(Type::Otf), None, None],
    "p12" => &[Some(Type::Binary), Some(Type::P12), None, None],
    "pas" => &[Some(Type::Pascal), Some(Type::Text), None, None],
    "patch" => &[Some(Type::Diff), Some(Type::Text), None, None],
    "pdf" => &[Some(Type::Binary), Some(Type::Pdf), None, None],
    "pem" => &[Some(Type::Pem), Some(Type::Text), None, None],
    "php" => &[Some(Type::Php), Some(Type::Text), None, None],
    "php4" => &[Some(Type::Php), Some(Type::Text), None, None],
    "php5" => &[Some(Type::Php), Some(Type::Text), None, None],
    "phtml" => &[Some(Type::Php), Some(Type::Text), None, None],
    "pl" => &[Some(Type::Perl), Some(Type::Text), None, None],
    "plantuml" => &[Some(Type::Plantuml), Some(Type::Text), None, None],
    "pm" => &[Some(Type::Perl), Some(Type::Text), None, None],
    "png" => &[Some(Type::Binary), Some(Type::Image), Some(Type::Png), None],
    "po" => &[Some(Type::Pofile), Some(Type::Text), None, None],
    "pom" => &[Some(Type::Pom), Some(Type::Text), Some(Type::Xml), None],
    "pp" => &[Some(Type::Puppet), Some(Type::Text), None, None],
    "prisma" => &[Some(Type::Prisma), Some(Type::Text), None, None],
    "properties" => &[Some(Type::JavaProperties), Some(Type::Text), None, None],
    "proto" => &[Some(Type::Proto), Some(Type::Text), None, None],
    "ps1" => &[Some(Type::Powershell), Some(Type::Text), None, None],
    "pug" => &[Some(Type::Pug), Some(Type::Text), None, None],
    "puml" => &[Some(Type::Plantuml), Some(Type::Text), None, None],
    "purs" => &[Some(Type::Purescript), Some(Type::Text), None, None],
    "pxd" => &[Some(Type::Cython), Some(Type::Text), None, None],
    "pxi" => &[Some(Type::Cython), Some(Type::Text), None, None],
    "py" => &[Some(Type::Python), Some(Type::Text), None, None],
    "pyi" => &[Some(Type::Pyi), Some(Type::Text), None, None],
    "pyproj" => &[Some(Type::Pyproj), Some(Type::Text), Some(Type::Xml), None],
    "pyt" => &[Some(Type::Python), Some(Type::Text), None, None],
    "pyx" => &[Some(Type::Cython), Some(Type::Text), None, None],
    "pyz" => &[Some(Type::Binary), Some(Type::Pyz), None, None],
    "pyzw" => &[Some(Type::Binary), Some(Type::Pyz), None, None],
    "qml" => &[Some(Type::Qml), Some(Type::Text), None, None],
    "r" => &[Some(Type::R), Some(Type::Text), None, None],
    "rake" => &[Some(Type::Ruby), Some(Type::Text), None, None],
    "rb" => &[Some(Type::Ruby), Some(Type::Text), None, None],
    "resx" => &[Some(Type::Resx), Some(Type::Text), Some(Type::Xml), None],
    "rng" => &[Some(Type::RelaxNg), Some(Type::Text), Some(Type::Xml), None],
    "rs" => &[Some(Type::Rust), Some(Type::Text), None, None],
    "rst" => &[Some(Type::Rst), Some(Type::Text), None, None],
    "s" => &[Some(Type::Asm), Some(Type::Text), None, None],
    "sass" => &[Some(Type::Sass), Some(Type::Text), None, None],
    "sbt" => &[Some(Type::Sbt), Some(Type::Scala), Some(Type::Text), None],
    "sc" => &[Some(Type::Scala), Some(Type::Text), None, None],
    "scala" => &[Some(Type::Scala), Some(Type::Text), None, None],
    "scm" => &[Some(Type::Scheme), Some(Type::Text), None, None],
    "scss" => &[Some(Type::Scss), Some(Type::Text), None, None],
    "sh" => &[Some(Type::Shell), Some(Type::Text), None, None],
    "sln" => &[Some(Type::Sln), Some(Type::Text), None, None],
    "sls" => &[Some(Type::Salt), Some(Type::Text), None, None],
    "so" => &[Some(Type::Binary), None, None, None],
    "sol" => &[Some(Type::Solidity), Some(Type::Text), None, None],
    "spec" => &[Some(Type::Spec), Some(Type::Text), None, None],
    "sql" => &[Some(Type::Sql), Some(Type::Text), None, None],
    "ss" => &[Some(Type::Scheme), Some(Type::Text), None, None],
    "sty" => &[Some(Type::Tex), Some(Type::Text), None, None],
    "styl" => &[Some(Type::Stylus), Some(Type::Text), None, None],
    "sv" => &[Some(Type::SystemVerilog), Some(Type::Text), None, None],
    "svelte" => &[Some(Type::Svelte), Some(Type::Text), None, None],
    "svg" => &[Some(Type::Image), Some(Type::Svg), Some(Type::Text), Some(Type::Xml)],
    "svh" => &[Some(Type::SystemVerilog), Some(Type::Text), None, None],
    "swf" => &[Some(Type::Binary), Some(Type::Swf), None, None],
    "swift" => &[Some(Type::Swift), Some(Type::Text), None, None],
    "swiftdeps" => &[Some(Type::Swiftdeps), Some(Type::Text), None, None],
    "tac" => &[Some(Type::Python), Some(Type::Text), Some(Type::Twisted), None],
    "tar" => &[Some(Type::Binary), Some(Type::Tar), None, None],
    "tex" => &[Some(Type::Tex), Some(Type::Text), None, None],
    "textproto" => &[Some(Type::Text), Some(Type::Textproto), None, None],
    "tf" => &[Some(Type::Terraform), Some(Type::Text), None, None],
    "tfvars" => &[Some(Type::Terraform), Some(Type::Text), None, None],
    "tgz" => &[Some(Type::Binary), Some(Type::Gzip), None, None],
    "thrift" => &[Some(Type::Text), Some(Type::Thrift), None, None],
    "tiff" => &[Some(Type::Binary), Some(Type::Image), Some(Type::Tiff), None],
    "toml" => &[Some(Type::Text), Some(Type::Toml), None, None],
    "ts" => &[Some(Type::Text), Some(Type::Ts), None, None],
    "tsv" => &[Some(Type::Text), Some(Type::Tsv), None, None],
    "tsx" => &[Some(Type::Text), Some(Type::Tsx), None, None],
    "ttf" => &[Some(Type::Binary), Some(Type::Ttf), None, None],
    "twig" => &[Some(Type::Text), Some(Type::Twig), None, None],
    "txsprofile" => &[Some(Type::Ini), Some(Type::Text), Some(Type::Txsprofile), None],
    "txt" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "txtpb" => &[Some(Type::Text), Some(Type::Textproto), None, None],
    "urdf" => &[Some(Type::Text), Some(Type::Urdf), Some(Type::Xml), None],
    "v" => &[Some(Type::Text), Some(Type::Verilog), None, None],
    "vb" => &[Some(Type::Text), Some(Type::Vb), None, None],
    "vbproj" => &[Some(Type::Text), Some(Type::Vbproj), Some(Type::Xml), None],
    "vcxproj" => &[Some(Type::Text), Some(Type::Vcxproj), Some(Type::Xml), None],
    "vdx" => &[Some(Type::Text), Some(Type::Vdx), None, None],
    "vh" => &[Some(Type::Text), Some(Type::Verilog), None, None],
    "vhd" => &[Some(Type::Text), Some(Type::Vhdl), None, None],
    "vim" => &[Some(Type::Text), Some(Type::Vim), None, None],
    "vtl" => &[Some(Type::Text), Some(Type::Vtl), None, None],
    "vue" => &[Some(Type::Text), Some(Type::Vue), None, None],
    "war" => &[Some(Type::Binary), Some(Type::Jar), Some(Type::Zip), None],
    "wav" => &[Some(Type::Audio), Some(Type::Binary), Some(Type::Wav), None],
    "webp" => &[Some(Type::Binary), Some(Type::Image), Some(Type::Webp), None],
    "whl" => &[Some(Type::Binary), Some(Type::Wheel), Some(Type::Zip), None],
    "wkt" => &[Some(Type::Text), Some(Type::Wkt), None, None],
    "woff" => &[Some(Type::Binary), Some(Type::Woff), None, None],
    "woff2" => &[Some(Type::Binary), Some(Type::Woff2), None, None],
    "wsgi" => &[Some(Type::Python), Some(Type::Text), Some(Type::Wsgi), None],
    "xacro" => &[Some(Type::Text), Some(Type::Urdf), Some(Type::Xacro), Some(Type::Xml)],
    "xctestplan" => &[Some(Type::Json), Some(Type::Text), None, None],
    "xhtml" => &[Some(Type::Html), Some(Type::Text), Some(Type::Xhtml), Some(Type::Xml)],
    "xml" => &[Some(Type::Text), Some(Type::Xml), None, None],
    "xq" => &[Some(Type::Text), Some(Type::Xquery), None, None],
    "xql" => &[Some(Type::Text), Some(Type::Xquery), None, None],
    "xqm" => &[Some(Type::Text), Some(Type::Xquery), None, None],
    "xqu" => &[Some(Type::Text), Some(Type::Xquery), None, None],
    "xquery" => &[Some(Type::Text), Some(Type::Xquery), None, None],
    "xqy" => &[Some(Type::Text), Some(Type::Xquery), None, None],
    "xsd" => &[Some(Type::Text), Some(Type::Xml), Some(Type::Xsd), None],
    "xsl" => &[Some(Type::Text), Some(Type::Xml), Some(Type::Xsl), None],
    "yaml" => &[Some(Type::Text), Some(Type::Yaml), None, None],
    "yamlld" => &[Some(Type::Text), Some(Type::Yaml), Some(Type::Yamlld), None],
    "yang" => &[Some(Type::Text), Some(Type::Yang), None, None],
    "yin" => &[Some(Type::Text), Some(Type::Xml), Some(Type::Yin), None],
    "yml" => &[Some(Type::Text), Some(Type::Yaml), None, None],
    "zcml" => &[Some(Type::Text), Some(Type::Xml), Some(Type::Zcml), None],
    "zig" => &[Some(Type::Text), Some(Type::Zig), None, None],
    "zip" => &[Some(Type::Binary), Some(Type::Zip), None, None],
    "zpt" => &[Some(Type::Text), Some(Type::Zpt), None, None],
    "zsh" => &[Some(Type::Shell), Some(Type::Text), Some(Type::Zsh), None],
};
pub fn map_extension(name: &str) -> Option<&[Option<Type>; 4]> {
    EXTENSION_MAP.get(name).cloned()
}

static NAME_MAP: phf::Map<&'static str, &'static [Option<Type>; 4]> = phf_map! {
    ".ansible-lint" => &[Some(Type::Text), Some(Type::Yaml), None, None],
    ".babelrc" => &[Some(Type::BabelRc), Some(Type::Json), Some(Type::Text), None],
    ".bash_aliases" => &[Some(Type::Bash), Some(Type::Shell), Some(Type::Text), None],
    ".bash_profile" => &[Some(Type::Bash), Some(Type::Shell), Some(Type::Text), None],
    ".bashrc" => &[Some(Type::Bash), Some(Type::Shell), Some(Type::Text), None],
    ".bazelrc" => &[Some(Type::BazelRc), Some(Type::Text), None, None],
    ".bowerrc" => &[Some(Type::BowerRc), Some(Type::Json), Some(Type::Text), None],
    ".browserslistrc" => &[Some(Type::BrowserslistRc), Some(Type::Text), None, None],
    ".clang-format" => &[Some(Type::Text), Some(Type::Yaml), None, None],
    ".clang-tidy" => &[Some(Type::Text), Some(Type::Yaml), None, None],
    ".codespellrc" => &[Some(Type::CodespellRc), Some(Type::Ini), Some(Type::Text), None],
    ".coveragerc" => &[Some(Type::CoverageRc), Some(Type::Ini), Some(Type::Text), None],
    ".cshrc" => &[Some(Type::Csh), Some(Type::Shell), Some(Type::Text), None],
    ".csslintrc" => &[Some(Type::CsslintRc), Some(Type::Json), Some(Type::Text), None],
    ".dockerignore" => &[Some(Type::Dockerignore), Some(Type::Text), None, None],
    ".editorconfig" => &[Some(Type::Editorconfig), Some(Type::Text), None, None],
    ".flake8" => &[Some(Type::Flake8), Some(Type::Ini), Some(Type::Text), None],
    ".gitattributes" => &[Some(Type::Gitattributes), Some(Type::Text), None, None],
    ".gitconfig" => &[Some(Type::Gitconfig), Some(Type::Ini), Some(Type::Text), None],
    ".gitignore" => &[Some(Type::Gitignore), Some(Type::Text), None, None],
    ".gitlint" => &[Some(Type::Gitlint), Some(Type::Ini), Some(Type::Text), None],
    ".gitmodules" => &[Some(Type::Gitmodules), Some(Type::Text), None, None],
    ".hgrc" => &[Some(Type::HgRc), Some(Type::Ini), Some(Type::Text), None],
    ".isort.cfg" => &[Some(Type::Ini), Some(Type::Isort), Some(Type::Text), None],
    ".jshintrc" => &[Some(Type::JshintRc), Some(Type::Json), Some(Type::Text), None],
    ".mailmap" => &[Some(Type::Mailmap), Some(Type::Text), None, None],
    ".mention-bot" => &[Some(Type::Json), Some(Type::MentionBot), Some(Type::Text), None],
    ".npmignore" => &[Some(Type::Npmignore), Some(Type::Text), None, None],
    ".pdbrc" => &[Some(Type::PdbRc), Some(Type::Python), Some(Type::Text), None],
    ".prettierignore" => &[Some(Type::Gitignore), Some(Type::Prettierignore), Some(Type::Text), None],
    ".pypirc" => &[Some(Type::Ini), Some(Type::PypiRc), Some(Type::Text), None],
    ".rstcheck.cfg" => &[Some(Type::Ini), Some(Type::Text), None, None],
    ".salt-lint" => &[Some(Type::SaltLint), Some(Type::Text), Some(Type::Yaml), None],
    ".yamllint" => &[Some(Type::Text), Some(Type::Yaml), Some(Type::Yamllint), None],
    ".zlogin" => &[Some(Type::Shell), Some(Type::Text), Some(Type::Zsh), None],
    ".zlogout" => &[Some(Type::Shell), Some(Type::Text), Some(Type::Zsh), None],
    ".zprofile" => &[Some(Type::Shell), Some(Type::Text), Some(Type::Zsh), None],
    ".zshenv" => &[Some(Type::Shell), Some(Type::Text), Some(Type::Zsh), None],
    ".zshrc" => &[Some(Type::Shell), Some(Type::Text), Some(Type::Zsh), None],
    "AUTHORS" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "BUILD" => &[Some(Type::Bazel), Some(Type::Text), None, None],
    "CHANGELOG" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "CMakeLists.txt" => &[Some(Type::Cmake), Some(Type::Text), None, None],
    "CONTRIBUTING" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "COPYING" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "Containerfile" => &[Some(Type::Dockerfile), Some(Type::Text), None, None],
    "Dockerfile" => &[Some(Type::Dockerfile), Some(Type::Text), None, None],
    "GNUmakefile" => &[Some(Type::Makefile), Some(Type::Text), None, None],
    "Gemfile" => &[Some(Type::Ruby), Some(Type::Text), None, None],
    "Gemfile.lock" => &[Some(Type::Text), None, None, None],
    "Jenkinsfile" => &[Some(Type::Groovy), Some(Type::Jenkins), Some(Type::Text), None],
    "LICENSE" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "MAINTAINERS" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "Makefile" => &[Some(Type::Makefile), Some(Type::Text), None, None],
    "NEWS" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "NOTICE" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "PATENTS" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "PKGBUILD" => &[Some(Type::Alpm), Some(Type::Bash), Some(Type::Pkgbuild), Some(Type::Text)],
    "Pipfile" => &[Some(Type::Text), Some(Type::Toml), None, None],
    "Pipfile.lock" => &[Some(Type::Json), Some(Type::Text), None, None],
    "README" => &[Some(Type::PlainText), Some(Type::Text), None, None],
    "Rakefile" => &[Some(Type::Ruby), Some(Type::Text), None, None],
    "Vagrantfile" => &[Some(Type::Ruby), Some(Type::Text), None, None],
    "WORKSPACE" => &[Some(Type::Bazel), Some(Type::Text), None, None],
    "config.ru" => &[Some(Type::Ruby), Some(Type::Text), None, None],
    "copy.bara.sky" => &[Some(Type::Bazel), Some(Type::Text), None, None],
    "go.mod" => &[Some(Type::GoMod), Some(Type::Text), None, None],
    "go.sum" => &[Some(Type::GoSum), Some(Type::Text), None, None],
    "makefile" => &[Some(Type::Makefile), Some(Type::Text), None, None],
    "meson.build" => &[Some(Type::Meson), Some(Type::Text), None, None],
    "meson_options.txt" => &[Some(Type::Meson), Some(Type::Text), None, None],
    "poetry.lock" => &[Some(Type::Text), Some(Type::Toml), None, None],
    "pom.xml" => &[Some(Type::Pom), Some(Type::Text), Some(Type::Xml), None],
    "pylintrc" => &[Some(Type::Ini), Some(Type::PylintRc), Some(Type::Text), None],
    "rebar.config" => &[Some(Type::Erlang), Some(Type::Text), None, None],
    "setup.cfg" => &[Some(Type::Ini), Some(Type::Text), None, None],
    "sys.config" => &[Some(Type::Erlang), Some(Type::Text), None, None],
    "sys.config.src" => &[Some(Type::Erlang), Some(Type::Text), None, None],
    "wscript" => &[Some(Type::Python), Some(Type::Text), None, None],
};
pub fn map_name(name: &str) -> Option<&[Option<Type>; 4]> {
    NAME_MAP.get(name).cloned()
}
