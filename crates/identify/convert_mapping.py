import json
from pathlib import Path

from identify.extensions import EXTENSIONS, NAMES
import subprocess
import io


def get_content_text(url):
    return subprocess.check_output(["curl", "-fsSL", url], encoding="utf-8")


license_text = get_content_text(
    "https://raw.githubusercontent.com/pre-commit/identify/main/LICENSE"
)

sio = io.StringIO()

sio.write("/// This file is automatically generated; please do not modify by hand.\n")
sio.write(
    "/// Based on code from `identify` (https://github.com/pre-commit/identify)\n"
)
sio.write("/// `identify` is licensed:\n")
sio.write("\n///   ".join(("\n" + license_text.strip()).splitlines()))
sio.write("\n///\n\n")
sio.write("use phf::phf_map;\n")

for name, map in [
    ("extension", EXTENSIONS),
    ("name", NAMES),
]:
    max_val_length = max(len(v) for v in map.values())
    var_name = f"{name.upper()}_MAP"
    rtype = f"(usize, [&str; {max_val_length}])"
    sio.write(
        f"\nstatic {var_name}: phf::Map<&'static str, &'static {rtype}> = phf_map! {{\n"
    )
    for k, v in sorted(map.items()):
        padded_v = sorted(v)
        padded_v += [""] * (max_val_length - len(padded_v))
        sio.write(f"    {json.dumps(k)} => &({len(v)}, {json.dumps(padded_v)}),\n")
    sio.write("};\n")
    sio.write(f"pub fn map_{name}(name: &str) -> Option<&{rtype}> {{\n")
    sio.write(f"    {var_name}.get(name).cloned()\n")
    sio.write("}\n")

Path("src/mappings.rs").write_text(sio.getvalue())
